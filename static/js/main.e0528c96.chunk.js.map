{"version":3,"sources":["KittenStatus/KittenStatus.js","KittenDetails/KittenDetails.js","Kitten/Kitten.js","KittensList/KittensList.js","ContainerForKittens/ContainerForKittens.js","App.js","serviceWorker.js","index.js"],"names":["KittenStatus","_ref","price","react_default","a","createElement","className","name","category","Kitten","kitten","this","props","styles","background","colors","Math","abs","stringValue","i","hash","length","charCodeAt","hashCode","getBgColor","style","src","img_url","alt","id","KittenStatus_KittenStatus","KittenDetails_KittenStatus","Component","KittensList","kittens","isLoading","map","element","src_Kitten_Kitten","key","Container","state","dataBase","counter","fetchData","fetch","_this","then","response","json","result","setState","cats","setTimeout","loadNextKittens","loadPrewKittens","res","data","Fragment","onClick","App","ContainerForKittens_ContainerForKittens","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e0528c96.chunk.js","sourcesContent":["import React from 'react';\r\nimport './KittenStatus.scss';\r\n\r\n\r\nexport default function KittenStatus({ price }) {\r\n    return (\r\n        <div className='kittenCard__status'>\r\n            <i className='icon' />\r\n            <p className='sale'>For sale</p>\r\n            <p className='price'>${price}</p>\r\n        </div>)\r\n}","import React from 'react';\r\nimport './KittenDetails.scss';\r\n\r\n\r\nexport default function KittenStatus({ name, category }) {\r\n    return (\r\n        <div className='kittenCard__details'>\r\n            <div className='kittenCard__details-header'>\r\n                <div className='kittenCard__details-name'>{name}</div>\r\n                <div className='like'></div>\r\n            </div>\r\n            <div className='kittenCard__details-stats'>\r\n                <i className='kittenCard__details-icon' />\r\n                <div className='kittenCard__details-category'>{category}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport KittenStatus from '../KittenStatus/KittenStatus';\r\nimport KittenDetails from '../KittenDetails/KittenDetails';\r\nimport './Kitten.scss';\r\n\r\nclass Kitten extends Component {\r\n    render() {\r\n        const { kitten } = this.props;\r\n        const getBgColor = () => {\r\n            function hashCode(stringValue) {\r\n                var hash = 0, i, chr;\r\n                if (stringValue.length === 0) return hash;\r\n                for (i = 0; i < stringValue.length; i++) {\r\n                    chr = stringValue.charCodeAt(i);\r\n                    hash = ((hash << 5) - hash) + chr;\r\n                    hash |= 0; // Convert to 32bit integer\r\n                }\r\n                return hash;\r\n            }\r\n            const colors = [\r\n                '#eee9e8',\r\n                '#faeefa',\r\n                '#faeefa',\r\n                '#fae1ca',\r\n                '#c5eefa',\r\n                '#efe1da',\r\n                '#d9f5cb',\r\n                '#dbf0d0',\r\n                '#e5e7ef',\r\n                '#fde9e4',\r\n                '#e5f3e2'\r\n            ]\r\n            const hashNumber = Math.abs(hashCode(kitten.name));\r\n            const arrayNumber = hashNumber % colors.length;\r\n            const kittenBgColor = colors[arrayNumber];\r\n\r\n            return kittenBgColor;\r\n        }\r\n        let currentBgColor = getBgColor();\r\n        let styles = {\r\n            background: {\r\n                background: currentBgColor\r\n            }\r\n        };\r\n\r\n\r\n        return (\r\n            <div className='kittenCard'>\r\n                <div className='kittenCard__main' style={styles.background}>\r\n                    <div className='kittenCard__main-container'>\r\n                        <div className='kittenCard__image-container'>\r\n                            <img className='kittenCard__image' src={kitten.img_url} alt={kitten.id}></img>\r\n                        </div>\r\n                        <KittenStatus price={kitten.price} />\r\n                    </div>\r\n                </div>\r\n                <KittenDetails name={kitten.name} category={kitten.category} />\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nexport default Kitten;","import React from 'react';\r\nimport Kitten from '../Kitten/Kitten';\r\n\r\n\r\n\r\nexport default function KittensList({ kittens, isLoading }) {\r\n    const kittensElements = kittens.map((element) =>\r\n        <Kitten key={element.id} kitten={element} />\r\n    )\r\n\r\n    return kittensElements;\r\n}","import React, { Component } from 'react';\r\nimport KittensList from '../KittensList/KittensList';\r\nimport './ContainerForKittens.scss';\r\n\r\n\r\n\r\nclass Container extends Component {\r\n\r\n    state = {\r\n        isLoading: true,\r\n        dataBase: null,\r\n        counter: 1\r\n    }\r\n\r\n\r\n    fetchData = () => {\r\n        fetch(\"https://ma-cats-api.herokuapp.com/api/cats?page=\" + this.state.counter + \"&per_page=12\")\r\n            .then(response => response.json())\r\n            .then(\r\n                (result) => {\r\n                    this.setState({\r\n                        dataBase: result.cats\r\n                    });\r\n\r\n                }\r\n            )\r\n            .then(() => {\r\n                setTimeout(() => {\r\n                    this.setState({\r\n                        isLoading: false\r\n                    });\r\n                }, 1000);\r\n            })\r\n    }\r\n    loadNextKittens = () => {\r\n        this.setState({ isLoading: true }, function afterChangeState() {\r\n            this.setState({ counter: (this.state.counter + 1) },\r\n                function afterCounterChange() {\r\n                    this.fetchData();\r\n                });\r\n        })\r\n\r\n    }\r\n\r\n\r\n    loadPrewKittens = () => {\r\n        if (this.state.counter > 1) {\r\n            this.setState({ counter: (this.state.counter - 1) },\r\n                function afterCounterChange() {\r\n                    this.fetchData();\r\n                });\r\n        }\r\n    }\r\n\r\n\r\n    async componentDidMount() {\r\n        let res = await fetch(\"https://ma-cats-api.herokuapp.com/api/cats?page=\" + this.state.counter + \"&per_page=12\");\r\n        let data = await res.json();\r\n        this.setState({\r\n            dataBase: data.cats,\r\n            isLoading: false\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <div className=\"container\">\r\n                    {this.state.isLoading ? (<div>Loading...</div>) : (<KittensList kittens={this.state.dataBase} />)}\r\n                </div>\r\n                <div className=\"list-nav\">\r\n                    <button className=\"loadMore\" onClick={this.loadPrewKittens}>Previous Page</button>\r\n                    <button className=\"loadMore\" onClick={this.loadNextKittens}>Next Page</button>\r\n                </div>\r\n\r\n            </>\r\n        );\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Container;\r\n","import React, { Component } from 'react';\nimport Container from './ContainerForKittens/ContainerForKittens';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Container />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}